MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/people?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("544c6d4b-944e-4440-8f43-d1b5eb8e61db") }
MongoDB server version: 4.4.6
{
	"_batch" : [
		{
			"_id" : "MWK",
			"AvgPerCurrency" : NumberDecimal("3574.42"),
			"SumPerCurrency" : NumberDecimal("3574.42")
		},
		{
			"_id" : "VEF",
			"AvgPerCurrency" : NumberDecimal("4166.64"),
			"SumPerCurrency" : NumberDecimal("8333.28")
		},
		{
			"_id" : "GTQ",
			"AvgPerCurrency" : NumberDecimal("5806.3"),
			"SumPerCurrency" : NumberDecimal("5806.3")
		},
		{
			"_id" : "MXN",
			"AvgPerCurrency" : NumberDecimal("5022.90"),
			"SumPerCurrency" : NumberDecimal("50229.00")
		},
		{
			"_id" : "RWF",
			"AvgPerCurrency" : NumberDecimal("4632.88"),
			"SumPerCurrency" : NumberDecimal("4632.88")
		},
		{
			"_id" : "THB",
			"AvgPerCurrency" : NumberDecimal("4604.392"),
			"SumPerCurrency" : NumberDecimal("23021.96")
		},
		{
			"_id" : "KYD",
			"AvgPerCurrency" : NumberDecimal("3760.89"),
			"SumPerCurrency" : NumberDecimal("3760.89")
		},
		{
			"_id" : "SEK",
			"AvgPerCurrency" : NumberDecimal("5060.013571428571428571428571428571"),
			"SumPerCurrency" : NumberDecimal("70840.19")
		},
		{
			"_id" : "CNY",
			"AvgPerCurrency" : NumberDecimal("4954.740842105263157894736842105263"),
			"SumPerCurrency" : NumberDecimal("470700.38")
		},
		{
			"_id" : "XAF",
			"AvgPerCurrency" : NumberDecimal("4698.22"),
			"SumPerCurrency" : NumberDecimal("14094.66")
		},
		{
			"_id" : "ZAR",
			"AvgPerCurrency" : NumberDecimal("3930.306666666666666666666666666667"),
			"SumPerCurrency" : NumberDecimal("11790.92")
		},
		{
			"_id" : "USD",
			"AvgPerCurrency" : NumberDecimal("4978.732"),
			"SumPerCurrency" : NumberDecimal("74680.98")
		},
		{
			"_id" : "IQD",
			"AvgPerCurrency" : NumberDecimal("4269.39"),
			"SumPerCurrency" : NumberDecimal("4269.39")
		},
		{
			"_id" : "ALL",
			"AvgPerCurrency" : NumberDecimal("3325.48"),
			"SumPerCurrency" : NumberDecimal("3325.48")
		},
		{
			"_id" : "MNT",
			"AvgPerCurrency" : NumberDecimal("5428.9025"),
			"SumPerCurrency" : NumberDecimal("21715.61")
		},
		{
			"_id" : "BYR",
			"AvgPerCurrency" : NumberDecimal("5095.79"),
			"SumPerCurrency" : NumberDecimal("5095.79")
		},
		{
			"_id" : "VND",
			"AvgPerCurrency" : NumberDecimal("4520.0325"),
			"SumPerCurrency" : NumberDecimal("36160.26")
		},
		{
			"_id" : "LYD",
			"AvgPerCurrency" : NumberDecimal("4382.495"),
			"SumPerCurrency" : NumberDecimal("8764.99")
		},
		{
			"_id" : "MMK",
			"AvgPerCurrency" : NumberDecimal("4629.42"),
			"SumPerCurrency" : NumberDecimal("4629.42")
		},
		{
			"_id" : "KRW",
			"AvgPerCurrency" : NumberDecimal("6689.91"),
			"SumPerCurrency" : NumberDecimal("13379.82")
		},
		{
			"_id" : "PKR",
			"AvgPerCurrency" : NumberDecimal("4734.50"),
			"SumPerCurrency" : NumberDecimal("18938.00")
		},
		{
			"_id" : "HRK",
			"AvgPerCurrency" : NumberDecimal("4870.964"),
			"SumPerCurrency" : NumberDecimal("24354.82")
		},
		{
			"_id" : "PEN",
			"AvgPerCurrency" : NumberDecimal("4661.235"),
			"SumPerCurrency" : NumberDecimal("18644.94")
		},
		{
			"_id" : "UZS",
			"AvgPerCurrency" : NumberDecimal("3573.03"),
			"SumPerCurrency" : NumberDecimal("3573.03")
		},
		{
			"_id" : "MYR",
			"AvgPerCurrency" : NumberDecimal("4781.12"),
			"SumPerCurrency" : NumberDecimal("4781.12")
		},
		{
			"_id" : "CDF",
			"AvgPerCurrency" : NumberDecimal("6114.4"),
			"SumPerCurrency" : NumberDecimal("12228.8")
		},
		{
			"_id" : "AMD",
			"AvgPerCurrency" : NumberDecimal("4921.866"),
			"SumPerCurrency" : NumberDecimal("24609.33")
		},
		{
			"_id" : "BOB",
			"AvgPerCurrency" : NumberDecimal("5263.3"),
			"SumPerCurrency" : NumberDecimal("5263.3")
		},
		{
			"_id" : "IRR",
			"AvgPerCurrency" : NumberDecimal("4417.373333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("26504.24")
		},
		{
			"_id" : "NPR",
			"AvgPerCurrency" : NumberDecimal("5792.26"),
			"SumPerCurrency" : NumberDecimal("5792.26")
		},
		{
			"_id" : "PHP",
			"AvgPerCurrency" : NumberDecimal("4941.928333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("118606.28")
		},
		{
			"_id" : "ISK",
			"AvgPerCurrency" : NumberDecimal("4316.41"),
			"SumPerCurrency" : NumberDecimal("4316.41")
		},
		{
			"_id" : "JPY",
			"AvgPerCurrency" : NumberDecimal("5078.728333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("60944.74")
		},
		{
			"_id" : "BWP",
			"AvgPerCurrency" : NumberDecimal("4076.29"),
			"SumPerCurrency" : NumberDecimal("4076.29")
		},
		{
			"_id" : "ETB",
			"AvgPerCurrency" : NumberDecimal("5436.11"),
			"SumPerCurrency" : NumberDecimal("5436.11")
		},
		{
			"_id" : "MAD",
			"AvgPerCurrency" : NumberDecimal("3818.85"),
			"SumPerCurrency" : NumberDecimal("3818.85")
		},
		{
			"_id" : "VUV",
			"AvgPerCurrency" : NumberDecimal("6418.27"),
			"SumPerCurrency" : NumberDecimal("6418.27")
		},
		{
			"_id" : "EGP",
			"AvgPerCurrency" : NumberDecimal("5579.3"),
			"SumPerCurrency" : NumberDecimal("5579.3")
		},
		{
			"_id" : "BRL",
			"AvgPerCurrency" : NumberDecimal("4512.001818181818181818181818181818"),
			"SumPerCurrency" : NumberDecimal("49632.02")
		},
		{
			"_id" : "CZK",
			"AvgPerCurrency" : NumberDecimal("4644.5525"),
			"SumPerCurrency" : NumberDecimal("37156.42")
		},
		{
			"_id" : "NIO",
			"AvgPerCurrency" : NumberDecimal("4985.64"),
			"SumPerCurrency" : NumberDecimal("9971.28")
		},
		{
			"_id" : "CLP",
			"AvgPerCurrency" : NumberDecimal("5252.2375"),
			"SumPerCurrency" : NumberDecimal("21008.95")
		},
		{
			"_id" : "PLN",
			"AvgPerCurrency" : NumberDecimal("5042.821111111111111111111111111111"),
			"SumPerCurrency" : NumberDecimal("90770.78")
		},
		{
			"_id" : "KZT",
			"AvgPerCurrency" : NumberDecimal("3788.95"),
			"SumPerCurrency" : NumberDecimal("3788.95")
		},
		{
			"_id" : "RSD",
			"AvgPerCurrency" : NumberDecimal("4276.56"),
			"SumPerCurrency" : NumberDecimal("4276.56")
		},
		{
			"_id" : "MGA",
			"AvgPerCurrency" : NumberDecimal("4853.663333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("14560.99")
		},
		{
			"_id" : "YER",
			"AvgPerCurrency" : NumberDecimal("4570.833333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("13712.50")
		},
		{
			"_id" : "NGN",
			"AvgPerCurrency" : NumberDecimal("4157.705"),
			"SumPerCurrency" : NumberDecimal("24946.23")
		},
		{
			"_id" : "NOK",
			"AvgPerCurrency" : NumberDecimal("4773.66"),
			"SumPerCurrency" : NumberDecimal("4773.66")
		},
		{
			"_id" : "EUR",
			"AvgPerCurrency" : NumberDecimal("4901.8294"),
			"SumPerCurrency" : NumberDecimal("245091.47")
		},
		{
			"_id" : "ZMW",
			"AvgPerCurrency" : NumberDecimal("5569.56"),
			"SumPerCurrency" : NumberDecimal("5569.56")
		},
		{
			"_id" : "COP",
			"AvgPerCurrency" : NumberDecimal("4936.6825"),
			"SumPerCurrency" : NumberDecimal("19746.73")
		},
		{
			"_id" : "IDR",
			"AvgPerCurrency" : NumberDecimal("4907.918030303030303030303030303030"),
			"SumPerCurrency" : NumberDecimal("323922.59")
		},
		{
			"_id" : "AFN",
			"AvgPerCurrency" : NumberDecimal("5585.163333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("16755.49")
		},
		{
			"_id" : "ZWL",
			"AvgPerCurrency" : NumberDecimal("5792.17"),
			"SumPerCurrency" : NumberDecimal("5792.17")
		},
		{
			"_id" : "PYG",
			"AvgPerCurrency" : NumberDecimal("4874.69"),
			"SumPerCurrency" : NumberDecimal("4874.69")
		},
		{
			"_id" : "ARS",
			"AvgPerCurrency" : NumberDecimal("4648.40"),
			"SumPerCurrency" : NumberDecimal("23242.00")
		},
		{
			"_id" : "NZD",
			"AvgPerCurrency" : NumberDecimal("5328.46"),
			"SumPerCurrency" : NumberDecimal("5328.46")
		},
		{
			"_id" : "MKD",
			"AvgPerCurrency" : NumberDecimal("3835.05"),
			"SumPerCurrency" : NumberDecimal("3835.05")
		},
		{
			"_id" : "UAH",
			"AvgPerCurrency" : NumberDecimal("5058.98"),
			"SumPerCurrency" : NumberDecimal("40471.84")
		},
		{
			"_id" : "XOF",
			"AvgPerCurrency" : NumberDecimal("5960.683333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("17882.05")
		},
		{
			"_id" : "CUP",
			"AvgPerCurrency" : NumberDecimal("5005.78"),
			"SumPerCurrency" : NumberDecimal("15017.34")
		},
		{
			"_id" : "HNL",
			"AvgPerCurrency" : NumberDecimal("5504.863333333333333333333333333333"),
			"SumPerCurrency" : NumberDecimal("16514.59")
		},
		{
			"_id" : "SRD",
			"AvgPerCurrency" : NumberDecimal("5286.68"),
			"SumPerCurrency" : NumberDecimal("5286.68")
		},
		{
			"_id" : "CAD",
			"AvgPerCurrency" : NumberDecimal("5306.872727272727272727272727272727"),
			"SumPerCurrency" : NumberDecimal("58375.60")
		},
		{
			"_id" : "DOP",
			"AvgPerCurrency" : NumberDecimal("5168.685"),
			"SumPerCurrency" : NumberDecimal("20674.74")
		},
		{
			"_id" : "TZS",
			"AvgPerCurrency" : NumberDecimal("3526.185"),
			"SumPerCurrency" : NumberDecimal("7052.37")
		},
		{
			"_id" : "ILS",
			"AvgPerCurrency" : NumberDecimal("5431.83"),
			"SumPerCurrency" : NumberDecimal("16295.49")
		},
		{
			"_id" : "RUB",
			"AvgPerCurrency" : NumberDecimal("4989.547916666666666666666666666667"),
			"SumPerCurrency" : NumberDecimal("119749.15")
		},
		{
			"_id" : "BGN",
			"AvgPerCurrency" : NumberDecimal("5300.22"),
			"SumPerCurrency" : NumberDecimal("21200.88")
		},
		{
			"_id" : "XPF",
			"AvgPerCurrency" : NumberDecimal("4759.07"),
			"SumPerCurrency" : NumberDecimal("4759.07")
		},
		{
			"_id" : "TJS",
			"AvgPerCurrency" : NumberDecimal("4087.71"),
			"SumPerCurrency" : NumberDecimal("4087.71")
		},
		{
			"_id" : "GBP",
			"AvgPerCurrency" : NumberDecimal("6149.19"),
			"SumPerCurrency" : NumberDecimal("6149.19")
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
